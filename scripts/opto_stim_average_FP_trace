% Use this script on fiber photometry and optogenetic data. First run the "Open_FP_and_EEG" script to get parameters.

mouse_of_interest = 'opto_386';



%% Normalize and plot 

MeanFilterOrder = 100; % for smoothing
MeanFilter = ones(MeanFilterOrder,1)/MeanFilterOrder;

fs_signal = 1:length(signal_465);
sec_signal = fs_signal/signal_fs;

tracer_inf_start = mouse{6}-TTL_onset(1); % aligened to EEG/EMG
tracer_inf_end = mouse{7}-TTL_onset(1); % aligened to EEG/EMG


% smoothing traces
delta465_filt = filtfilt(MeanFilter,1,double(delta_465));
delta488_filt = filtfilt(MeanFilter,1,double(delta_488));

% downsampling traces for plotting
ds_delta465_filt = downsample(delta465_filt, 100);
ds_delta488_filt = downsample(delta488_filt, 100);

fs_signal = 1:1:length(delta465_filt);
sec_signal = fs_signal/signal_fs;
ds_sec_signal = downsample(sec_signal, 100);

ds_delta465_filt = ds_delta465_filt(1:length(ds_delta488_filt));
ds_sec_signal = ds_sec_signal(1:length(ds_delta488_filt));

% detrend traces and plot
delta_465_conv = delta465_filt-conv(delta465_filt, ones(1000, 1)/1000, 'same');
ds_delta465_filt_conv = ds_delta465_filt-conv(ds_delta465_filt, ones(10000, 1)/10000, 'same');
ds_delta488_filt_conv = ds_delta488_filt-conv(ds_delta488_filt, ones(10000, 1)/10000, 'same');

figure
a = subplot(2,1,1);
    plot(ds_sec_signal, ds_delta465_filt); 
    xlabel('time (s)');
    ylabel('023');
b = subplot(2,1,2);
    plot(ds_sec_signal, ds_delta488_filt); 
    xlabel('time (s)');
    ylabel('019');
linkaxes([a,b],'x');

signal_fs_ds = signal_fs/100;




%% Divide different parts of trace

%% for 375
% pulse_low_amp = ds_delta488_filt(464*signal_fs_ds:1063*signal_fs_ds);
% pulse_low_amp_pulse = ds_delta465_filt(464*signal_fs_ds:1063*signal_fs_ds);
 
% baseline_eeg_start = 1745;
% baseline_eeg_end = 3693;


%% for 377
% pulse_low_amp = ds_delta488_filt(3333*signal_fs_ds:3961*signal_fs_ds);
% pulse_low_amp_pulse = ds_delta465_filt(3333*signal_fs_ds:3961*signal_fs_ds);

% baseline_eeg_start = 2152;
% baseline_eeg_end = 2695;


%% for 363
% pulse_low_amp = ds_delta488_filt(1573*signal_fs_ds:2184*signal_fs_ds);
% pulse_low_amp_pulse = ds_delta465_filt(1573*signal_fs_ds:2184*signal_fs_ds);

% baseline_eeg_start = 2909;
% baseline_eeg_end = 4423;


%% for 365
% pulse_low_amp = ds_delta488_filt(4250*signal_fs_ds:4854*signal_fs_ds);
% pulse_low_amp_pulse = ds_delta465_filt(4250*signal_fs_ds:4854*signal_fs_ds);

% baseline_eeg_start = 4880;
% baseline_eeg_end = 7609;


%% for opto_373
% pulse_low_amp = ds_delta488_filt(3000*signal_fs_ds:4500*signal_fs_ds);
% pulse_low_amp_pulse = ds_delta465_filt(1224*signal_fs_ds:4500*signal_fs_ds);
% 
% baseline_eeg_start = 1745;
% baseline_eeg_end = 3693;


%% for opto_363
% pulse_low_amp = ds_delta488_filt(length(ds_delta488_filt)-900*signal_fs_ds:length(ds_delta488_filt));
% pulse_low_amp_pulse = ds_delta465_filt(length(ds_delta488_filt)-900*signal_fs_ds:length(ds_delta488_filt));
% 
% baseline_eeg_start = 1745;
% baseline_eeg_end = 3693;




%% Find pulses

pulse_signal_of_interest = ds_delta465_filt;
signal_of_interest = ds_delta488_filt;

% find signal pulse
signal_pulse = pulse_signal_of_interest;
signal_diff = find(diff(signal_pulse>500));
if strcmp(mouse_of_interest, 'opto_363')
    signal_diff = signal_diff(3:length(signal_diff));
end
signal_onset = signal_diff(1:2:end);
signal_offset = signal_diff(2:2:end);
TTL_onset_EEG_time = signal_diff/sampling_freq;
TTL_onset_EEG_time_diff = diff(TTL_onset_EEG_time);
TTL_diff = diff(signal_pulse);
TTL_pulses_list = find(TTL_diff > 0.001);
first_TTL_pulse_start = TTL_pulses_list(1);

TTL_every_sixt = signal_diff(1:6:end);




%% Average after pulse

MA_min_duration = 0;
MA_max_duration = 10;
arousal_window_size = 30;   %time before and after MA in seconds
% trace_id = ["tracer", "albumin"];
trace_id = ["tracer"];
% trace_id = ["tracer"];
% period_id = ["whole_trace", "influx", "efflux"];   %influx, efflux or whole_trace
% period_id = ["efflux", "whole_trace"];   %influx, efflux or whole_trace
period_id = ["whole_trace"]; 

EEG_fs = 512;
power_bands = {[1, 4], [4, 8], [12, 16], [16, 30]}; 
total_power_band = [1, 30];
window = hann(round(EEG_fs));
overlap = round(EEG_fs/5);
time_before_after = 10;

arousal_onsets = TTL_every_sixt(1:end);
[influx_peak,influx_peak_frame] = max(signal_of_interest);
signal_fs_ds = signal_fs/100;
influx_peak_time = influx_peak_frame / signal_fs_ds;
influx_start = 10 * influx_peak / 100;    % when tracer level has reached 10% of max
influx_end = 90 * influx_peak / 100;     % when tracer level has reached 90% of max
[~,influx_start_frame] = (min(abs(signal_of_interest - influx_start)));
influx_start_time = influx_start_frame / signal_fs_ds;
[~,influx_end_frame] = (min(abs(signal_of_interest - influx_end)));
influx_end_time = influx_end_frame / signal_fs_ds;
% efflux_start_time = influx_peak_time + (influx_peak_time-influx_end);
efflux_start_time = (find(signal_of_interest == max(signal_of_interest)))/signal_fs_ds;
efflux_start_frame = efflux_start_time*signal_fs_ds;


for trace_index = 1:length(trace_id)
    trace_of_interest = trace_id(trace_index);

    if strcmp(trace_of_interest, "albumin")
        data_trace_of_interest = ds_delta465_filt;
    elseif strcmp(trace_of_interest, "tracer")
        data_trace_of_interest = signal_of_interest;
    end

    for period_index = 1:length(period_id)                % (influx, efflux or whole trace)
        period_of_interest = period_id(period_index);

        for dur_index=1:size(MA_max_duration,1)
            MA_max_dur = MA_max_duration(dur_index);
            MA_min_dur = MA_min_duration(dur_index);

            stim_collector = [];
            stim_norm_collector = [];
            stim_transition_spectrogram_collector = [];
            stim_band_power_collector_indv_MA = [];
            stim_delta_collector = [];
            stim_theta_collector = [];
            stim_sigma_collector = [];
            stim_beta_collector = [];

            for i_stim=1:length(arousal_onsets)
                arousal_onset = arousal_onsets(i_stim);

                if isnan(arousal_onset)
                    continue
                end

                if strcmp(period_of_interest, 'influx')
                    if arousal_onset < influx_start_time
                        continue
                    end
                    if arousal_onset > influx_end_time
                        continue
                    end
                elseif strcmp(period_of_interest, 'efflux')
                    if arousal_onset < efflux_start_time
                        continue
                    end
                end


                stim_onset_index_FP_frames = arousal_onset;
                index_window_FP_frames = floor(signal_fs_ds * arousal_window_size);
                from_index_FP_frames_stim = floor(stim_onset_index_FP_frames- index_window_FP_frames);
                to_index_FP_frames_stim = from_index_FP_frames_stim + index_window_FP_frames*2;

                arousal_onset_index_EEG_frames_stim = EEG_fs * arousal_onset/signal_fs_ds;
                index_window_EEG_frames_stim = floor(EEG_fs * arousal_window_size);
                from_index_EEG_frames_stim = floor(arousal_onset_index_EEG_frames_stim-index_window_EEG_frames_stim);
                to_index_EEG_frames_stim = from_index_EEG_frames_stim + index_window_EEG_frames_stim*2;


                if i_stim == length(arousal_onsets)
                    continue
                end

                if i_stim == 1
                    continue
                end

                if strcmp(data_trace_of_interest, 'tracer' )
                    if arousal_onset < 1000 * signal_fs_ds
                        continue
                    end
                end

                if to_index_FP_frames_stim > length(data_trace_of_interest)
                    continue
                end

                if to_index_EEG_frames_stim > length(EEG_rawtrace_cut)
                    continue
                end

                if from_index_FP_frames_stim < 0
                    continue
                end

                % make collector of microarousals
                    stim = data_trace_of_interest(from_index_FP_frames_stim : to_index_FP_frames_stim);
                    stim_norm = stim-mean(stim(length(stim)-3*signal_fs_ds:end));

                    stim_collector = [stim_collector; stim];

                    norm_factor_average = mean(stim(50:60));
                    norm_average_tracer_traces =  stim-norm_factor_average;
                    stim_norm_collector = [stim_norm_collector; norm_average_tracer_traces];


                    [stim_transition_spectrogram, F, stim_T] = spectrogram(EEG_rawtrace_cut((from_index_EEG_frames_stim):(to_index_EEG_frames_stim)),window,overlap,[],EEG_fs,'yaxis');
                    stim_transition_spectrogram_collector = cat(3, stim_transition_spectrogram_collector, stim_transition_spectrogram);
                    mean_stim_transition_spectrogram_per_mouse = mean(log(abs(stim_transition_spectrogram_collector)), 3);
                    [stim_band_power_collector_indv_MA] = find_power_trace(mean_stim_transition_spectrogram_per_mouse, power_bands, F);
                    stim_delta_collector = [stim_delta_collector; stim_band_power_collector_indv_MA(1,:)];
                    stim_theta_collector = [stim_theta_collector; stim_band_power_collector_indv_MA(2,:)];
                    stim_sigma_collector = [stim_sigma_collector; stim_band_power_collector_indv_MA(3,:)];
                    stim_beta_collector = [stim_beta_collector; stim_band_power_collector_indv_MA(4,:)];
            end

            mean_stim_transition_spectrogram = mean(log(abs(stim_transition_spectrogram_collector)), 3);

            stim_delta_mean = mean(stim_delta_collector);
            stim_theta_mean = mean(stim_theta_collector);
            stim_sigma_mean = mean(stim_sigma_collector);
            stim_beta_mean = mean(stim_beta_collector);

            stim_delta_mean_turned = stim_delta_mean';
            stim_theta_mean_turned = stim_theta_mean';
            stim_sigma_mean_turned = stim_sigma_mean';
            stim_beta_mean_turned = stim_beta_mean';

            %             for band_i_avg = 1:length(power_bands)
            %                 power_band_avg = power_bands{band_i_avg};
            %                 power_trace_avg = mean(mean_spectrogram(find(F==power_band(1)):find(F==power_band(2)), :), 1);
            %                 band_power_collector_avg = [band_power_collector_avg; power_trace_avg];
            %             end



            stim_time = (1:length(stim))/signal_fs_ds;
            stim_mean = mean(stim_collector);
            stim_mean_norm = stim_mean - mean(stim_mean(72:102));
            stim_albumin_collector_turned = stim_collector';
            stim_transition_time = stim_time - arousal_window_size;
            stim_spectrogram_time = stim_T-arousal_window_size;

            stim_mean_norm_turned = stim_mean_norm';
            stim_transition_time_turned = stim_transition_time';
            stim_spectrogram_time_turned = stim_spectrogram_time';


            trace_of_interest = convertStringsToChars(trace_of_interest);
            period_of_interest = convertStringsToChars(period_of_interest);
            MA_max_dur_path = int2str(MA_max_dur);
            ma_output_path = ['path where files should be saved to'];
            spectrogram_output_path = ['path where files should be saved to'];
            ma_delta_power_traces_path = ['path where files should be saved to'];
            ma_theta_power_traces_path = ['path where files should be saved to'];
            ma_sigma_power_traces_path = ['path where files should be saved to'];
            ma_beta_power_traces_path = ['path where files should be saved to'];
            trace_vs_delta_x_corr_path = ['path where files should be saved to'];
            trace_vs_theta_x_corr_path = ['path where files should be saved to'];
            trace_vs_sigma_x_corr_path = ['path where files should be saved to'];
            trace_vs_beta_x_corr_path = ['path where files should be saved to'];

%                         save(ma_output_path, 'microarousal_collector');
%                         save(spectrogram_output_path, 'transition_spectrogram_collector', 'T', 'F');
%                         save(ma_delta_power_traces_path, 'delta_collector', 'T', 'F')
%                         save(ma_theta_power_traces_path, 'theta_collector', 'T', 'F')
%                         save(ma_sigma_power_traces_path, 'sigma_collector', 'T', 'F')
%                         save(ma_beta_power_traces_path, 'beta_collector', 'T', 'F')
%                         save(trace_vs_delta_x_corr_path, 'trace_delta_correlations', 'lag_axis')
%                         save(trace_vs_theta_x_corr_path, 'trace_theta_correlations', 'lag_axis')
%                         save(trace_vs_sigma_x_corr_path, 'trace_sigma_correlations', 'lag_axis')
%                         save(trace_vs_beta_x_corr_path, 'trace_beta_correlations', 'lag_axis')

            fig = figure;
            plot(stim_transition_time, stim_mean)
            title([trace_of_interest])


            fig = figure;
            a = subplot(3,1,1);
            filtered_mean_stim_spectrogram = imgaussfilt(mean_stim_transition_spectrogram, 2.5);
            imagesc(stim_spectrogram_time, F, filtered_mean_stim_spectrogram); %plot the log spectrum
            set(gca,'YDir', 'normal'); % flip the Y Axis so lower frequencies are at the bottom
            ylim([0, 20]);
            % h = colorbar;
            clim([-6.0, -5.3])
            colormap(gca, 'plasma');
            title([MA_max_dur])
            b = subplot(3,1,2);
            plot(stim_transition_time, stim_mean)
            xlim([-arousal_window_size, arousal_window_size]);
            title([trace_of_interest])
            c = subplot(3, 1, 3);
            plot(stim_spectrogram_time, stim_beta_mean, 'r')
            xlim([-arousal_window_size, arousal_window_size]);
            title("beta power")


        end
    end
end



%%



% Find micro-arousals

% MA_max_duration = [5,10,20,40,80,500];
% MA_min_duration = [0,5,10,20,40,80];
MA_min_duration = 0;
MA_max_duration = 4;
% MA_min_dur = 20;
% arousal_min_duration = 30;
arousal_window_size = 30;   %time before and after MA in seconds
trace_id = ["tracer"];
% trace_id = ["tracer"];
% period_id = ["whole_trace", "influx", "efflux"];   %influx, efflux or whole_trace
% period_id = ["efflux", "whole_trace"];   %influx, efflux or whole_trace
period_id = ["whole_trace"]; 

EEG_fs = 512;
power_bands = {[1, 4], [4, 8], [12, 16], [16, 30]}; 
total_power_band = [1, 30];
window = hann(round(EEG_fs));
overlap = round(EEG_fs/5);
time_before_after = 10;
% 
arousal_onsets = wake_periods_cut(:, 1);
arousal_durations = wake_periods_cut(:, 2) - wake_periods_cut(:, 1);
% arousal_onsets = MA_periods_cut(:, 1);
% arousal_durations = MA_periods_cut(:, 2) - MA_periods_cut(:, 1);
% arousal_onsets = NE_peaks(:, 1);
% arousal_durations = linspace(5,6,length(NE_peaks))';
[influx_peak,influx_peak_frame] = max(ds_delta465_filt);
signal_fs_ds = signal_fs/100;
influx_peak_time = influx_peak_frame / signal_fs_ds;
influx_start = 10 * influx_peak / 100;    % when tracer level has reached 10% of max
influx_end = 90 * influx_peak / 100;     % when tracer level has reached 90% of max
[~,influx_start_frame] = (min(abs(ds_delta465_filt - influx_start)));
influx_start_time = influx_start_frame / signal_fs_ds;
[~,influx_end_frame] = (min(abs(ds_delta465_filt - influx_end)));
influx_end_time = influx_end_frame / signal_fs_ds;
% efflux_start_time = influx_peak_time + (influx_peak_time-influx_end);
efflux_start_time = (find(ds_delta465_filt == max(ds_delta465_filt)))/signal_fs_ds;
efflux_start_frame = efflux_start_time*signal_fs_ds;

for trace_index = 1:length(trace_id)
    trace_of_interest = trace_id(trace_index);

    if strcmp(trace_of_interest, 'tracer')
        data_trace_of_interest = ds_delta488_filt;
    elseif strcmp(trace_of_interest, 'albumin')
        data_trace_of_interest = ds_delta465_filt;
    end

    for period_index = 1:length(period_id)                % (influx, efflux or whole trace)
        period_of_interest = period_id(period_index);

        for dur_index=1:length(MA_max_duration)
            MA_max_dur = MA_max_duration(dur_index);
            MA_min_dur = MA_min_duration(dur_index);

            microarousal_collector = [];
            arousal_albumin_collector = [];
            transition_spectrogram_collector = [];
            band_power_collector_indv_MA = [];
            band_power_collector_avg = [];
            band_power_collector = [];
            delta_collector = [];
            theta_collector = [];
            sigma_collector = [];
            beta_collector = [];

            for i=1:length(arousal_onsets)
                arousal_onset = arousal_onsets(i);
                arousal_duration = arousal_durations(i);

                if isnan(arousal_onset)
                    continue
                end

                if strcmp(period_of_interest, 'influx')
                    if arousal_onset < influx_start_time
                        continue
                    end
                    if arousal_onset > influx_end_time
                        continue
                    end
                elseif strcmp(period_of_interest, 'efflux')
                    if arousal_onset < efflux_start_time
                        continue
                    end
                end

                arousal_onset_index_FP_frames = signal_fs_ds * arousal_onset;
                index_window_FP_frames = floor(signal_fs_ds * arousal_window_size);
                from_index_FP_frames = floor(arousal_onset_index_FP_frames-index_window_FP_frames);
                to_index_FP_frames = from_index_FP_frames + index_window_FP_frames*2;

                arousal_onset_index_EEG_frames = EEG_fs * arousal_onset;
                index_window_EEG_frames = floor(EEG_fs * arousal_window_size);
                from_index_EEG_frames = floor(arousal_onset_index_EEG_frames-index_window_EEG_frames);
                to_index_EEG_frames = from_index_EEG_frames + index_window_EEG_frames*2;

                if from_index_FP_frames/signal_fs_ds < baseline_eeg_start || to_index_FP_frames/signal_fs_ds > baseline_eeg_end
                    continue
                end

                if from_index_FP_frames < 1 || to_index_FP_frames > length(data_trace_of_interest)
                    continue
                end

                if from_index_FP_frames < time_before_after*signal_fs_ds || to_index_FP_frames > length(data_trace_of_interest)-time_before_after*signal_fs_ds
                    continue
                end

                if i == length(arousal_onsets)
                    continue
                end

                if i == 1
                    continue
                end


                % make collector of microarousals
                if arousal_duration <= MA_max_dur && arousal_duration >= MA_min_dur && arousal_onsets(i+1)-arousal_onset > time_before_after && arousal_onset - arousal_onsets(i-1) > time_before_after
                    ma = data_trace_of_interest(from_index_FP_frames : to_index_FP_frames);
                    ma_norm = ma-mean(ma(1:60*signal_fs_ds));
                    microarousal_collector = [microarousal_collector; ma];
                    [transition_spectrogram, F, T] = spectrogram(EEG_rawtrace_cut((from_index_EEG_frames):(to_index_EEG_frames)),window,overlap,[],EEG_fs,'yaxis');
                    transition_spectrogram_collector = cat(3, transition_spectrogram_collector, transition_spectrogram);
                    mean_transition_spectrogram = mean(log(abs(transition_spectrogram)), 3);
                    [band_power_collector_indv_MA] = find_power_trace(mean_transition_spectrogram, power_bands, F);
                    delta_collector = [delta_collector; band_power_collector_indv_MA(1,:)];
                    theta_collector = [theta_collector; band_power_collector_indv_MA(2,:)];
                    sigma_collector = [sigma_collector; band_power_collector_indv_MA(3,:)];
                    beta_collector = [beta_collector; band_power_collector_indv_MA(4,:)];
                end
            end


            mean_spectrogram = mean(log(abs(transition_spectrogram_collector)), 3);


            MA_time = (1:length(ma))/signal_fs_ds;
            ma_mean = mean(microarousal_collector);
            microarousal_albumin_collector_turned = microarousal_collector';
            MA_transition_time = MA_time - arousal_window_size;
            spectrogram_time = T-arousal_window_size;

%             [trace_delta_correlations, trace_theta_correlations, trace_sigma_correlations, trace_beta_correlations, correlation_collector_delta, lag_axis] = trace_EEG_x_corr(delta_collector, theta_collector, sigma_collector, beta_collector, microarousal_collector, signal_fs_ds, MA_max_dur);

            delta_mean = mean(delta_collector);
            theta_mean = mean(theta_collector);
            sigma_mean = mean(sigma_collector);
            beta_mean = mean(beta_collector);

            trace_of_interest = convertStringsToChars(trace_of_interest);
            period_of_interest = convertStringsToChars(period_of_interest);
            MA_max_dur_path = int2str(MA_max_dur);
            ma_output_path = ['path where files should be saved to'];
            spectrogram_output_path = ['path where files should be saved to'];
            ma_delta_power_traces_path = ['path where files should be saved to'];
            ma_theta_power_traces_path = ['path where files should be saved to'];
            ma_sigma_power_traces_path = ['path where files should be saved to'];
            ma_beta_power_traces_path = ['path where files should be saved to'];
            trace_vs_delta_x_corr_path = ['path where files should be saved to'];
            trace_vs_theta_x_corr_path = ['path where files should be saved to'];
            trace_vs_sigma_x_corr_path = ['path where files should be saved to'];
            trace_vs_beta_x_corr_path = ['path where files should be saved to'];

%                         save(ma_output_path, 'microarousal_collector');
%                         save(spectrogram_output_path, 'transition_spectrogram_collector', 'T', 'F');
%                         save(ma_delta_power_traces_path, 'delta_collector', 'T', 'F')
%                         save(ma_theta_power_traces_path, 'theta_collector', 'T', 'F')
%                         save(ma_sigma_power_traces_path, 'sigma_collector', 'T', 'F')
%                         save(ma_beta_power_traces_path, 'beta_collector', 'T', 'F')
%                         save(trace_vs_delta_x_corr_path, 'trace_delta_correlations', 'lag_axis')
%                         save(trace_vs_theta_x_corr_path, 'trace_theta_correlations', 'lag_axis')
%                         save(trace_vs_sigma_x_corr_path, 'trace_sigma_correlations', 'lag_axis')
%                         save(trace_vs_beta_x_corr_path, 'trace_beta_correlations', 'lag_axis')

            fig = figure;
            a = subplot(3,1,1);
            filtered_mean_spectrogram = imgaussfilt(mean_spectrogram, 2.5);
            imagesc(spectrogram_time, F, filtered_mean_spectrogram); %plot the log spectrum
            set(gca,'YDir', 'normal'); % flip the Y Axis so lower frequencies are at the bottom
            ylim([0, 20]);
            % h = colorbar;
            clim([-6.0, -5.3])
            colormap(gca, 'plasma');
            title([MA_max_dur])
            b = subplot(3,1,2);
            plot(MA_transition_time, ma_mean)
            xlim([-arousal_window_size, arousal_window_size]);
            title([trace_of_interest])
            c = subplot(3, 1, 3);
            plot(spectrogram_time, beta_mean, 'r')
            xlim([-arousal_window_size, arousal_window_size]);
            title("beta power")

        end
    end
end





%% compare stim and MA

% Make plot of one stimulation
average_stim_collector = [];

for stim_average_index = 1:length(signal_offset)
    stim_number = signal_offset(stim_average_index);

    if stim_number > length(signal_of_interest)-66
        continue
    end

    if stim_number < length(signal_of_interest)/2
        continue
    end

    average_stim_collector = [average_stim_collector; signal_of_interest(stim_number+1:stim_number+66)];
end

% figure, plot(average_stim_collector')

stim_average = mean(average_stim_collector);
stim_average_norm = stim_average-mean(stim_average(length(stim_average)-10:length(stim_average)));
stim_average_norm_turned = stim_average_norm';

stim_one_time = (1:length(stim_average_norm))./signal_fs_ds;
figure, plot(stim_one_time,stim_average_norm)

% % make plot of one MA
% [x,y] = min(ma_mean);
% ma_one = ma_mean(y:y+length(stim_average)-1);
% ma_one_norm = ma_one-mean(ma_mean(length(ma_one)-10:length(ma_one)));
% ma_one_time = (1:length(ma_one))./signal_fs_ds;
% ma_one_norm_turned = ma_one_norm';
% figure, plot(ma_one_time,ma_one_norm)
% legend("stimulation", "natural MA")

% stim_one_one = stim_one_norm';
stim_one_time_turned = stim_one_time';



%% save tracer influx trace

opto_influx_output_path = ['path where files should be saved to'];
opto_average_influx_output_path = ['path where files should be saved to'];

opto_save_file = [ds_sec_signal', ds_delta488_filt'];
opto_average_save_file = [stim_transition_time', stim_mean'];
% 
save(opto_influx_output_path, 'opto_save_file');
save(opto_average_influx_output_path, 'opto_average_save_file');




