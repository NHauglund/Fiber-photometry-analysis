%% 1) Define mouse data

% data structure:
    % 1) path to FP raw data (folder with .tsq file)
    % 2) path to EEG raw data (folder with .exp file)
    % 3) path to EEG sleep score file
    % 4) albumin channel name
    % 5) tracer channel name   
    % 6) Tracer infusion start time
    % 7) Tracer infusion end time

my_data = {[path to FP raw data (folder with .tsq file)] '[path to EEG raw data (folder with .exp file)]' '[path to EEG sleep score file] '[albumin channel name (e.g. x60D)]' '[CSF tracer / NE channel name (e.g. x65A) ]' [[time of tracer infusion start in seconds]] [[time of tracer infusion end in seconds]]};

mouse = my_data;

%% 2) Load FP data

data = TDTbin2mat(mouse{1});

signal_fs = data.streams.(mouse{4}).fs;

signal_488 = data.streams.(mouse{4}).data; % albumin

signal_465 = data.streams.(mouse{5}).data; % tracer

% removing FP trace prior to first TTL pulse
TTL_FP = data.epocs.PtC1.onset;
% TTL_FP = data.epocs.Pu1_.onset;
TTL_gap = diff(TTL_FP) > 5 + 1;
if isempty(find(TTL_gap == 1, 1))
    TTL_onset = TTL_FP(1);  % when TTL pulse train is only started once
else 
    TTL_onset = TTL_FP(find(TTL_gap==1)+1); % when TTL pulse train is started more than once
end

first_TTL = TTL_onset(1)*signal_fs;
onset_FP = first_TTL;

signal_465 = signal_465(floor(onset_FP):end);
signal_488 = signal_488(floor(onset_FP):end);

figure(),plot(signal_488);

%% 3) Normalize and plot 

MeanFilterOrder = 1000; % for smoothing
MeanFilter = ones(MeanFilterOrder,1)/MeanFilterOrder;

fs_signal = 1:length(signal_465);
sec_signal = fs_signal/signal_fs;

tracer_inf_start = mouse{6}-TTL_onset(1); % aligened to EEG/EMG
tracer_inf_end = mouse{7}-TTL_onset(1); % aligened to EEG/EMG
% 
if length(signal_465) > 5000*signal_fs
    med_465 = median(signal_465((floor(round(tracer_inf_start)*signal_fs)-60*5*signal_fs):floor(round(tracer_inf_start)*signal_fs))); %median of 5 minutes before inf start is used
    delta_465 = ((signal_465 - med_465)/med_465)*100;
    med_488 = median(signal_488((floor(round(tracer_inf_start)*signal_fs)-60*5*signal_fs):floor(round(tracer_inf_start)*signal_fs))); %median of 5 minutes before inf start is used
    delta_488 = ((signal_488 - med_488)/med_488)*100;
else
    med_465 = median(signal_465((1:floor(round(10*signal_fs))))); %median of first 10 seconds is used
    delta_465 = ((signal_465 - med_465)/med_465)*100;
    med_488 = median(signal_488((1:floor(round(10*signal_fs))))); %median of first 10 seconds is used
    delta_488 = ((signal_488 - med_488)/med_488)*100;
end

% delta_465 = signal_465;
% delta_488 = signal_488;


% figure
% plot(sec_signal(1000:end), delta_465(1000:end));
% title('normalized signal');

% smoothing traces
delta465_filt = filtfilt(MeanFilter,1,double(delta_465));
delta488_filt = filtfilt(MeanFilter,1,double(delta_488));

% downsampling traces for plotting
ds_delta465_filt = downsample(delta465_filt, 100);
ds_delta488_filt = downsample(delta488_filt, 100);

fs_signal = 1:1:length(delta465_filt);
sec_signal = fs_signal/signal_fs;
ds_sec_signal = downsample(sec_signal, 100);

% detrend traces and plot
delta_465_conv = delta465_filt-conv(delta465_filt, ones(1000, 1)/1000, 'same');
ds_delta465_filt_conv = ds_delta465_filt-conv(ds_delta465_filt, ones(10000, 1)/10000, 'same');
ds_delta488_filt_conv = ds_delta488_filt-conv(ds_delta488_filt, ones(10000, 1)/10000, 'same');

figure
a = subplot(2,1,1);
    plot(ds_sec_signal, ds_delta465_filt); 
    xlabel('time (s)');
    ylabel('023');
b = subplot(2,1,2);
    plot(ds_sec_signal, ds_delta488_filt); 
    xlabel('time (s)');
    ylabel('019');
linkaxes([a,b],'x');

%% 4) loading and plotting EEG and EMG raw data

% Make sure the "ExpToolbox" is added to the matlab path

% Import EEG raw data to matlab
Info=loadEXP([mouse{2}],'no');

TimeReldebSec=0; %start extract data from the beginning (first bin)
% TimeRelEndSec=Info.BinFiles.Duration; %inf to include all data 
TimeRelEndSec=inf; %inf to include all data 

[Data,Time]=ExtractContinuousData([],Info,[],TimeReldebSec, TimeRelEndSec,[],1);

EMG_rawtrace = Data(1,1:end);
EEG_rawtrace = Data(2,1:end);

%time vector using sampling frequency
sampling_freq = Info.Fs;
EEG_time = (1:length(EEG_rawtrace))/sampling_freq;


% Plot of EEG and EMG traces
figure
a = subplot(2,1,1);
    plot(EEG_time, EMG_rawtrace); 
    xlabel('time (s)');
    ylabel('EMG (V)');
b = subplot(2,1,2);
    plot(EEG_time, EEG_rawtrace); 
    xlabel('time (s)');
    ylabel('EEG (V)');
linkaxes([a,b],'x');





%% 5) open EEG sleep scoring
EEG_sleepscore = xlsread(mouse{3});   %the path to the xlsx file with the transitions

% Create binary vectors for sleep stages
%Awake
wake_onset = rmmissing(EEG_sleepscore(:, 2)); % onset of each wake bout in sec (NaNs are removed)
wake_duration = rmmissing(EEG_sleepscore(:, 3)); % duration of each wake bout in sec (NaNs are removed)

%Slow-wave sleep
sws_onset = rmmissing(EEG_sleepscore(:, 6)); % onset of each SWS bout in sec (NaNs are removed)
duration_sws = rmmissing(EEG_sleepscore(:, 7)); % duration of each SWS bout in sec (NaNs are removed)

if size(EEG_sleepscore,2) > 7
    %REM
    REM_onset = rmmissing(EEG_sleepscore(:, 10)); % onset of each REM bout in sec (NaNs are removed)
    REM_duration = rmmissing(EEG_sleepscore(:, 11)); % duration of each REM bout in sec (NaNs are removed)
    REM_status = 1;
else
    REM_status = 0;
end



if size(EEG_sleepscore,2) > 11
    MA_onset = rmmissing(EEG_sleepscore(:, 14)); % onset of each REM bout in sec (NaNs are removed)
    MA_duration = rmmissing(EEG_sleepscore(:, 15)); % duration of each REM bout in sec (NaNs are removed)
    MA_status = 1;
else
    MA_status = 0;
end

% Most EEG scorings don't start at time 0 - which shifts the timeline of the
% scoring relative to the EEG/EMG traces - this is corrected for below
if REM_status == 0
    if min([wake_onset(1), sws_onset(1)]) ~= 0
        EEG_scoring_onset = min([wake_onset(1), sws_onset(1)]); % determines the number of seconds to be subtracted
        wake_onset = wake_onset - EEG_scoring_onset;
        sws_onset = sws_onset - EEG_scoring_onset;
    end
elseif REM_status == 1
    if min([wake_onset(1), sws_onset(1), REM_onset(1)]) ~= 0
        EEG_scoring_onset = min([wake_onset(1), sws_onset(1), REM_onset(1)]); % determines the number of seconds to be subtracted
        wake_onset = wake_onset - EEG_scoring_onset;
        sws_onset = sws_onset - EEG_scoring_onset;
        REM_onset = REM_onset - EEG_scoring_onset;
    end
end

% NB! all EEG/EMG traces are not aligned properly with sleep score (~4 s delay)

if wake_onset(1) > 3
wake_onset(1:length(wake_onset)) = wake_onset(1:length(wake_onset)) -0.8;
elseif wake_onset(1) < 3
    wake_onset(1) = wake_onset(1);
    wake_onset(2:length(wake_onset)) = wake_onset(2:length(wake_onset)) -0.8;
end
if sws_onset(1) > 3
sws_onset(1:length(sws_onset)) = sws_onset(1:length(sws_onset)) -0.8;
end
if REM_onset > 3
REM_onset = REM_onset-0.8;
end

wake_onset = wake_onset+4;
sws_onset = sws_onset+4;
REM_onset = REM_onset+4;




% Assumption: For binary vectors index 1 = time 0-1s, index 2= time 1-2 sec, and so forth
wake_binary_vector = zeros([1, sum([Info.HypnoFiles.Duration])]); %not adding anything
% wake_binary_vector = zeros([1, (Info.HypnoFiles.Duration)+1]); % vector of zeros matching the length of recording in seconds (+1 for last time interval)
for i=1:length(wake_onset) % making time vector for EEG scoring (frequency = 1Hz)
    t = wake_onset(i)+1; % +1 to put time 0 as index 1
    d = wake_duration(i)-1; % -1 compensates for adding 1
    wake_binary_vector(t:t+d) = 1;
end

% sws_binary_vector = zeros([1, (Info.HypnoFiles.Duration)+4]); %adding 4 to match vector lengths to sws
sws_binary_vector = zeros([1, sum([Info.HypnoFiles.Duration])]); %not adding anything
%sws_binary_vector = zeros([1, (Info.HypnoFiles.Duration)+1]); % vector of zeros matching the length of recording in seconds  (+1 for last time interval)
for i=1:length(sws_onset) % making time vector for EEG scoring (frequency = 1Hz)
    t = sws_onset(i)+1; 
    d = duration_sws(i)-1;
    sws_binary_vector(t:t+d) = 1;
end

if REM_status == 1
    % REM_binary_vector = zeros([1, (Info.HypnoFiles.Duration)+4]); %adding 4 to match vector lengths to sws
    REM_binary_vector = zeros([1, sum([Info.HypnoFiles.Duration])]); %adding 4 to match vector lengths to sws
    %REM_binary_vector = zeros([1, (Info.HypnoFiles.Duration)+1]); % vector of zeros matching the length of recording in seconds (+1 for last time interval)
    for i=1:length(REM_onset) % making time vector for EEG scoring (frequency = 1Hz)
        t = REM_onset(i)+1;
        d = REM_duration(i)-1;
        REM_binary_vector(t:t+d) = 1;
    end
end

if MA_status == 1
    MA_binary_vector = zeros([1, sum([Info.HypnoFiles.Duration])]); %adding 4 to match vector lengths to sws
    for i=1:length(MA_onset) % making time vector for EEG scoring (frequency = 1Hz)
        t = MA_onset(i)+1;
        d = MA_duration(i)-1;
        MA_binary_vector(t:t+d) = 1;
    end
end

if length(wake_binary_vector)>length(sws_binary_vector)
wake_binary_vector = wake_binary_vector(1:length(sws_binary_vector));
elseif length(wake_binary_vector)<length(sws_binary_vector)
sws_binary_vector = sws_binary_vector(1:length(wake_binary_vector));
end

if length(REM_binary_vector)>length(sws_binary_vector)
    REM_binary_vector = REM_binary_vector(1:length(sws_binary_vector));
end

% Time vector for sleep scoring (1 Hz)
sleepscore_time = 0:length(sws_binary_vector)-1; % Should be same length for wake/sws/REM binary vectors

if MA_status == 0
    if REM_status == 0
    figure;
    a = subplot(2,1,1);
    plot_sleep(EEG_time, EMG_rawtrace, sleepscore_time, wake_binary_vector, sws_binary_vector);
    xlabel('time (s)');
    ylabel('EMG (V)');
    b = subplot(2,1,2);
    plot_sleep(EEG_time, EEG_rawtrace, sleepscore_time, wake_binary_vector, sws_binary_vector);
    xlabel('time (s)');
    ylabel('EEG (V)');
    linkaxes([a,b],'x');
    elseif REM_status == 1
    figure;
    a = subplot(2,1,1);
    plot_sleep(EEG_time, EMG_rawtrace, sleepscore_time, wake_binary_vector, sws_binary_vector, REM_binary_vector);
    xlabel('time (s)');
    ylabel('EMG (V)');
    b = subplot(2,1,2);
    plot_sleep(EEG_time, EEG_rawtrace, sleepscore_time, wake_binary_vector, sws_binary_vector, REM_binary_vector);
    xlabel('time (s)');
    ylabel('EEG (V)');
    linkaxes([a,b],'x');
    end

    % 2-column vectors with on- and offsets for each state
    wake_periods = [wake_onset wake_onset+wake_duration];
    sws_periods = [sws_onset sws_onset+duration_sws];
    if REM_status == 1
        REM_periods = [REM_onset REM_onset+REM_duration];
    end

elseif MA_status == 1
    figure;
    a = subplot(2,1,1);
    plot_sleep(EEG_time, EMG_rawtrace, sleepscore_time, wake_binary_vector, sws_binary_vector, REM_binary_vector, MA_binary_vector);
    xlabel('time (s)');
    ylabel('EMG (V)');
    b = subplot(2,1,2);
    plot_sleep(EEG_time, EEG_rawtrace, sleepscore_time, wake_binary_vector, sws_binary_vector, REM_binary_vector, MA_binary_vector);
    xlabel('time (s)');
    ylabel('EEG (V)');
    linkaxes([a,b],'x');

    % 2-column vectors with on- and offsets for each state
    wake_periods = [wake_onset wake_onset+wake_duration];
    sws_periods = [sws_onset sws_onset+duration_sws];
    REM_periods = [REM_onset REM_onset+REM_duration];
    MA_periods = [MA_onset MA_onset+MA_duration];

end



%% 7) Alingment of EEG recording and FP recording

signal_fs_ds = signal_fs/100;

% TTL pulse from FP
TTL_pulse = Data(3,1:end);
TTL_onset_EEG = find(diff(TTL_pulse>1*10^-3));
TTL_onset_EEG_time = TTL_onset_EEG/sampling_freq;
TTL_onset_EEG_time_diff = diff(TTL_onset_EEG_time);
TTL_diff = diff(TTL_pulse);
TTL_pulses_list = find(TTL_diff > 0.001);
first_TTL_pulse_start = TTL_pulses_list(1);

first_TTL_pulse_start_time_sec = (first_TTL_pulse_start) / sampling_freq;
last_TTL_pulse_start = TTL_pulses_list(end);
last_TTL_pulse_start_time_sec = (last_TTL_pulse_start) / sampling_freq;

% TTL_gap_EEG = TTL_onset_EEG_time_diff > 5;
% if isempty(find(TTL_gap_EEG==1, 1))
%     TTL_onset_EEG = TTL_onset_EEG(1);
% else 
%     TTL_onset_EEG = TTL_onset_EEG(find(TTL_onset_EEG_time_diff>5)+1);
% end


index_of_first_ttl_EEG_frames = first_TTL_pulse_start;
% index_of_end_of_fp_recording_EEG_frames = round(TTL_EEG_onset) + round((size(signal_465, 2)/signal_fs)*sampling_freq);
index_of_end_of_fp_recording_EEG_frames = first_TTL_pulse_start + last_TTL_pulse_start;
% index_of_end_of_fp_recording_EEG_sec = round(size(signal_465, 2)/signal_fs)+round(TTL_EEG_onset+1);
% index_of_end_of_fp_recording_EEG_sec = round(first_TTL_pulse_start_time_sec) + round(last_TTL_pulse_start_time_sec);
index_of_end_of_fp_recording_EEG_sec = round(first_TTL_pulse_start_time_sec + last_TTL_pulse_start_time_sec);


%Cutting EEG/EMG traces leading up to first TTL 
if length(EMG_rawtrace) > first_TTL_pulse_start+(length(ds_delta465_filt)/signal_fs_ds*sampling_freq+1)
    EMG_rawtrace_cut = EMG_rawtrace(first_TTL_pulse_start:first_TTL_pulse_start+(length(ds_delta465_filt)/signal_fs_ds*sampling_freq+1));
    EEG_rawtrace_cut = EEG_rawtrace(first_TTL_pulse_start:first_TTL_pulse_start+length(ds_delta465_filt)/signal_fs_ds*sampling_freq+1);
    EEG_time_cut = (1:length(EEG_rawtrace_cut))/sampling_freq;
elseif length(EMG_rawtrace) < first_TTL_pulse_start+(length(ds_delta465_filt)/signal_fs_ds*sampling_freq+1)
    EMG_rawtrace_cut = EMG_rawtrace(first_TTL_pulse_start:end);
    EEG_rawtrace_cut = EEG_rawtrace(first_TTL_pulse_start:end);
    EEG_time_cut = (1:length(EEG_rawtrace_cut))/sampling_freq;
end

% % cut FP trace to fit EEG/EMG trace
% if length(EMG_rawtrace_cut) < length(ds_delta465_filt)/signal_fs_ds*sampling_freq
%     ds_delta464_filt = ds_delta465_filt(1:length(EMG_rawtrace_cut)/sampling_freq*signal_fs_ds);
% end


% Remove first seconds of EEG score to align with FP trace
if length(EMG_rawtrace) > length(ds_delta465_filt)/signal_fs_ds*sampling_freq
    if length(wake_binary_vector) > round(first_TTL_pulse_start_time_sec+(length(ds_delta465_filt)/signal_fs_ds))
        wake_binary_vector_cut = wake_binary_vector(round(first_TTL_pulse_start_time_sec+1):round(first_TTL_pulse_start_time_sec+(length(ds_delta465_filt)/signal_fs_ds)));
        sws_binary_vector_cut = sws_binary_vector(round(first_TTL_pulse_start_time_sec+1):round(first_TTL_pulse_start_time_sec+(length(ds_delta465_filt)/signal_fs_ds)));
        REM_binary_vector_cut = REM_binary_vector(round(first_TTL_pulse_start_time_sec+1):round(first_TTL_pulse_start_time_sec+(length(ds_delta465_filt)/signal_fs_ds)));
        if MA_status == 1
           MA_binary_vector_cut = MA_binary_vector(round(first_TTL_pulse_start_time_sec+1):round(first_TTL_pulse_start_time_sec+(length(ds_delta465_filt)/signal_fs_ds))); 
        end
    elseif length(wake_binary_vector) < round(first_TTL_pulse_start_time_sec+(length(ds_delta465_filt)/signal_fs_ds))
        wake_binary_vector_cut = wake_binary_vector(round(first_TTL_pulse_start_time_sec+1):end);
        sws_binary_vector_cut = sws_binary_vector(round(first_TTL_pulse_start_time_sec+1):end);
        REM_binary_vector_cut = REM_binary_vector(round(first_TTL_pulse_start_time_sec+1):end);
        if MA_status == 1
            MA_binary_vector_cut = MA_binary_vector(round(first_TTL_pulse_start_time_sec+1):end);
        end
    end
elseif length(EMG_rawtrace) < length(ds_delta465_filt)/signal_fs_ds*sampling_freq
    wake_binary_vector_cut = wake_binary_vector(round(first_TTL_pulse_start_time_sec+1):end);
    sws_binary_vector_cut = sws_binary_vector(round(first_TTL_pulse_start_time_sec+1):end);
    REM_binary_vector_cut = REM_binary_vector(round(first_TTL_pulse_start_time_sec+1):end);
    if MA_status == 1
      MA_binary_vector_cut = MA_binary_vector(round(first_TTL_pulse_start_time_sec+1):end);  
    end
end



% Align onset, offset, and duration vectors based on TTL
[wake_onset_cut, wake_offset_cut] = binary_to_OnOff(wake_binary_vector_cut);
wake_duration_cut = wake_offset_cut - wake_onset_cut;

[sws_onset_cut, sws_offset_cut] = binary_to_OnOff(sws_binary_vector_cut);
sws_duration_cut = sws_offset_cut - sws_onset_cut;

if REM_periods(1,2)>1
[REM_onset_cut, REM_offset_cut] = binary_to_OnOff(REM_binary_vector_cut);
REM_duration_cut = REM_offset_cut - REM_onset_cut;
end

if MA_status == 1
    [MA_onset_cut, MA_offset_cut] = binary_to_OnOff(MA_binary_vector_cut);
    MA_duration_cut = MA_offset_cut - MA_onset_cut;
end


% Align period arrays according to TTL
wake_periods_cut = [wake_onset_cut wake_offset_cut];
sws_periods_cut = [sws_onset_cut sws_offset_cut];

if REM_periods(1,2)>1
   REM_periods_cut = [REM_onset_cut REM_offset_cut];
else
   REM_periods_cut = REM_periods; 
end

if MA_status == 1
    MA_periods_cut = [MA_onset_cut MA_offset_cut];
end


%% 8) Plotting all traces and scorings together

% % plot EEG sleep scoring bouts together with FP data

% % Time vector for sleep scoring (1 Hz)
% % NB! Here using the cut vector to match the length of binary vectors after being cut to align with FP
sleepscore_time_cut = 0:length(wake_binary_vector_cut)-1; % should be same length for wake/sws/REM
fs_signal = 1:length(upsample(ds_delta465_filt,100));
sec_signal = fs_signal/signal_fs;
ds_sec_signal = downsample(sec_signal, 100);
EEG_time_cut = (1:length(EEG_rawtrace_cut))/512;



if MA_status == 0
fig = figure;
a = subplot (4,1,1);
    plot_sleep(ds_sec_signal, ds_delta465_filt, sleepscore_time_cut, wake_binary_vector_cut, sws_binary_vector_cut, REM_binary_vector_cut);
    title('tracer');
    hold on
%     xlim([0, 15000])
%     plot(tracer_inf_start, ds_delta465_filt(round(tracer_inf_start*signal_fs/100)), 'g*')
%     plot(tracer_inf_end, ds_delta465_filt(round(tracer_inf_end*signal_fs/100)), 'r*')
b = subplot (4,1,2);
    plot_sleep(ds_sec_signal, ds_delta488_filt, sleepscore_time_cut, wake_binary_vector_cut, sws_binary_vector_cut, REM_binary_vector_cut);
    title('albumin');
    hold on
%     xlim([0, 15000])
%     plot(tracer_inf_start, ds_delta488_filt_conv(round(tracer_inf_start*signal_fs/100)), 'g*')
%     plot(tracer_inf_end, ds_delta488_filt_conv(round(tracer_inf_end*signal_fs/100)), 'r*')
c = subplot(4,1,3);
    ds_EEG_time = downsample(EEG_time_cut, 10);
    ds_EMG_rawtrace = downsample(EMG_rawtrace_cut, 10);
    plot_sleep(ds_EEG_time, ds_EMG_rawtrace, sleepscore_time_cut, wake_binary_vector_cut, sws_binary_vector_cut, REM_binary_vector_cut);
    xlabel('time (s)');
    ylabel('EMG (V)');
%     xlim([0, 15000])
    xtickformat('%.4g')
d = subplot(4,1,4);
    ds_EEG_rawtrace = downsample(EEG_rawtrace_cut, 10);
    plot_sleep(ds_EEG_time, ds_EEG_rawtrace, sleepscore_time_cut, wake_binary_vector_cut, sws_binary_vector_cut, REM_binary_vector_cut);
    xlabel('time (s)');
    ylabel('EEG (V)');
%     xlim([0, 15000])
linkaxes([a,b,c,d],'x');

elseif MA_status == 1
fig = figure;
a = subplot (4,1,1);
    plot_sleep(ds_sec_signal, ds_delta465_filt_conv, sleepscore_time_cut, wake_binary_vector_cut, sws_binary_vector_cut, REM_binary_vector_cut, MA_binary_vector_cut);
    title('tracer');
    hold on
    xlim([0, 15000])
%     plot(tracer_inf_start, ds_delta465_filt(round(tracer_inf_start*signal_fs/100)), 'g*')
%     plot(tracer_inf_end, ds_delta465_filt(round(tracer_inf_end*signal_fs/100)), 'r*')
b = subplot (4,1,2);
    plot_sleep(ds_sec_signal, ds_delta488_filt_conv, sleepscore_time_cut, wake_binary_vector_cut, sws_binary_vector_cut, REM_binary_vector_cut, MA_binary_vector_cut);
    title('albumin');
    hold on
    xlim([0, 15000])
%     plot(tracer_inf_start, ds_delta488_filt_conv(round(tracer_inf_start*signal_fs/100)), 'g*')
%     plot(tracer_inf_end, ds_delta488_filt_conv(round(tracer_inf_end*signal_fs/100)), 'r*')
c = subplot(4,1,3);
    ds_EEG_time = downsample(EEG_time_cut, 10);
    ds_EMG_rawtrace = downsample(EMG_rawtrace_cut, 10);
    plot_sleep(ds_EEG_time, ds_EMG_rawtrace, sleepscore_time_cut, wake_binary_vector_cut, sws_binary_vector_cut, REM_binary_vector_cut, MA_binary_vector_cut);
    xlabel('time (s)');
    ylabel('EMG (V)');
    xlim([0, 15000])
    xtickformat('%.4g')
d = subplot(4,1,4);
    ds_EEG_rawtrace = downsample(EEG_rawtrace_cut, 10);
    plot_sleep(ds_EEG_time, ds_EEG_rawtrace, sleepscore_time_cut, wake_binary_vector_cut, sws_binary_vector_cut, REM_binary_vector_cut, MA_binary_vector_cut);
    xlabel('time (s)');
    ylabel('EEG (V)');
    xlim([0, 15000])
linkaxes([a,b,c,d],'x');
end

% % 

% % % 
% print('-painters','-depsc', 'name_of_.eps_file_to_be_saved')
% 
% h = datacursormode(fig);
%     h.UpdateFcn = @DataCursor_custom;
%     h.SnapToDataVertex = 'on';
%     datacursormode on



%%
% 
% 
% fig = figure;
% a = subplot (6,1,1);
%     plot_sleep(ds_sec_signal, ds_delta465_filt_conv_right, sleepscore_time_cut, wake_binary_vector_cut, sws_binary_vector_cut, REM_binary_vector_cut);
%     title('tracer right');
%     hold on
%     xlim([0, 15000])
%     plot(tracer_inf_start, ds_delta465_filt(round(tracer_inf_start*signal_fs/100)), 'g*')
%     plot(tracer_inf_end, ds_delta465_filt(round(tracer_inf_end*signal_fs/100)), 'r*')
% b = subplot (6,1,2);
%     plot_sleep(ds_sec_signal, ds_delta465_filt_conv_left, sleepscore_time_cut, wake_binary_vector_cut, sws_binary_vector_cut, REM_binary_vector_cut);
%     title('tracer left');
%     hold on
%     xlim([0, 15000])
%     plot(tracer_inf_start, ds_delta488_filt_conv(round(tracer_inf_start*signal_fs/100)), 'g*')
%     plot(tracer_inf_end, ds_delta488_filt_conv(round(tracer_inf_end*signal_fs/100)), 'r*')
% c = subplot (6,1,3);
%     plot_sleep(ds_sec_signal, ds_delta488_filt_conv_right, sleepscore_time_cut, wake_binary_vector_cut, sws_binary_vector_cut, REM_binary_vector_cut);
%     title('albumin right');
%     hold on
%     xlim([0, 15000])
%     plot(tracer_inf_start, ds_delta465_filt(round(tracer_inf_start*signal_fs/100)), 'g*')
%     plot(tracer_inf_end, ds_delta465_filt(round(tracer_inf_end*signal_fs/100)), 'r*')
% d = subplot (6,1,4);
%     plot_sleep(ds_sec_signal, ds_delta488_filt_conv_left, sleepscore_time_cut, wake_binary_vector_cut, sws_binary_vector_cut, REM_binary_vector_cut);
%     title('albumin left');
%     hold on
%     xlim([0, 15000])
%     plot(tracer_inf_start, ds_delta488_filt_conv(round(tracer_inf_start*signal_fs/100)), 'g*')
%     plot(tracer_inf_end, ds_delta488_filt_conv(round(tracer_inf_end*signal_fs/100)), 'r*')
% e = subplot(6,1,5);
%     ds_EEG_time = downsample(EEG_time_cut, 10);
%     ds_EMG_rawtrace = downsample(EMG_rawtrace_cut, 10);
%     plot_sleep(ds_EEG_time, ds_EMG_rawtrace, sleepscore_time_cut, wake_binary_vector_cut, sws_binary_vector_cut, REM_binary_vector_cut);
%     xlabel('time (s)');
%     ylabel('EMG (V)');
%     xlim([0, 15000])
%     xtickformat('%.4g')
% f = subplot(6,1,6);
%     ds_EEG_rawtrace = downsample(EEG_rawtrace_cut, 10);
%     plot_sleep(ds_EEG_time, ds_EEG_rawtrace, sleepscore_time_cut, wake_binary_vector_cut, sws_binary_vector_cut, REM_binary_vector_cut);
%     xlabel('time (s)');
%     ylabel('EEG (V)');
%     xlim([0, 15000])
% linkaxes([a,b,c,d,e,f],'x');
